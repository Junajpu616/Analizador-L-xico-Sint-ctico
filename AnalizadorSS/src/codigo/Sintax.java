
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 30 18:08:03 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 30 18:08:03 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\002\004\000\002\003\005" +
    "\000\002\003\006\000\002\003\007\000\002\003\010\000" +
    "\002\004\003\000\002\004\005\000\002\004\005\000\002" +
    "\005\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\006\000\002\006\003\000\002\006\005\000\002\006\003" +
    "\000\002\007\003\000\002\007\005\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\012\007\015\012\005\013\013\016\012\001" +
    "\002\000\026\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\027\011\026\017\ufff8\022\ufff8\023\ufff8\001\002\000" +
    "\016\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\014\055" +
    "\001\002\000\012\002\000\004\052\022\051\023\053\001" +
    "\002\000\026\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\017\ufff5\022\ufff5\023\ufff5\001\002\000" +
    "\004\002\050\001\002\000\010\005\046\006\021\007\020" +
    "\001\002\000\010\012\023\013\013\016\012\001\002\000" +
    "\032\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\043\014\uffee\017\uffee\022\uffee\023\uffee\001" +
    "\002\000\030\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\014\041\017\ufff1\022\ufff1\023\ufff1\001" +
    "\002\000\010\012\016\013\013\016\012\001\002\000\016" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\014\035\001" +
    "\002\000\010\005\022\006\021\007\020\001\002\000\010" +
    "\012\023\013\013\016\012\001\002\000\010\012\023\013" +
    "\013\016\012\001\002\000\010\012\023\013\013\016\012" +
    "\001\002\000\026\002\uffef\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\017\uffef\022\uffef\023\uffef\001\002" +
    "\000\016\002\ufffb\004\ufffb\006\021\007\020\022\ufffb\023" +
    "\ufffb\001\002\000\026\002\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\027\011\026\017\ufff7\022\ufff7\023\ufff7\001" +
    "\002\000\010\012\023\013\013\016\012\001\002\000\012" +
    "\010\031\012\023\013\013\016\012\001\002\000\026\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\017\ufff4\022\ufff4\023\ufff4\001\002\000\010\012\023\013" +
    "\013\016\012\001\002\000\026\002\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\017\ufff2\022\ufff2\023" +
    "\ufff2\001\002\000\026\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\017\ufff3\022\ufff3\023\ufff3\001" +
    "\002\000\026\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\027\011\026\017\ufff6\022\ufff6\023\ufff6\001\002\000" +
    "\010\012\023\013\013\016\012\001\002\000\010\005\037" +
    "\006\021\007\020\001\002\000\010\012\023\013\013\016" +
    "\012\001\002\000\016\002\ufff9\004\ufff9\006\021\007\020" +
    "\022\ufff9\023\ufff9\001\002\000\010\012\023\013\013\016" +
    "\012\001\002\000\026\002\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\017\ufff0\022\ufff0\023\ufff0\001" +
    "\002\000\030\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\014\uffec\017\uffec\022\uffec\023\uffec\001" +
    "\002\000\010\006\021\007\020\017\045\001\002\000\030" +
    "\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\014\uffed\017\uffed\022\uffed\023\uffed\001\002\000\010" +
    "\012\023\013\013\016\012\001\002\000\016\002\ufffc\004" +
    "\ufffc\006\021\007\020\022\ufffc\023\ufffc\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffe\001\002\000\012\007" +
    "\015\012\005\013\013\016\012\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\uffff\001\002\000\010\012\023\013" +
    "\013\016\012\001\002\000\010\005\057\006\021\007\020" +
    "\001\002\000\010\012\023\013\013\016\012\001\002\000" +
    "\016\002\ufffa\004\ufffa\006\021\007\020\022\ufffa\023\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\016\002\007\003\005\004\010\005\003\006" +
    "\006\007\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\043\005\003\006\006\007\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\016\005\003\006\006\007\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\033\006\006\007\013\001" +
    "\001\000\010\005\024\006\006\007\013\001\001\000\012" +
    "\004\023\005\003\006\006\007\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\032" +
    "\007\013\001\001\000\006\006\027\007\013\001\001\000" +
    "\002\001\001\000\006\006\031\007\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\035\005\003\006\006\007\013\001\001\000\002\001\001" +
    "\000\012\004\037\005\003\006\006\007\013\001\001\000" +
    "\002\001\001\000\006\006\041\007\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\046\005\003\006\006\007\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\053\004\010\005\003\006\006\007\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\055\005" +
    "\003\006\006\007\013\001\001\000\002\001\001\000\012" +
    "\004\057\005\003\006\006\007\013\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Atom ::= Numero Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Atom",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Atom ::= Parentesis_A Expresion Parentesis_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Atom",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Atom ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Atom",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Factor ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Factor ::= Atom Exponente Factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Factor ::= Atom 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Termino ::= Termino Multiplicacion Multiplicacion Factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Termino",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Termino ::= Termino Division Factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Termino",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Termino ::= Termino Multiplicacion Factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Termino",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Termino ::= Factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Termino",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expresion ::= Expresion Resta Termino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expresion ::= Expresion Suma Termino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expresion ::= Termino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Ecuacion ::= Resta Variable Exponente Expresion Igual Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Ecuacion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Ecuacion ::= Variable Exponente Expresion Igual Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Ecuacion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Ecuacion ::= Resta Expresion Igual Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Ecuacion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Ecuacion ::= Expresion Igual Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Ecuacion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Ecuaciones ::= Ecuacion NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Ecuaciones",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Ecuaciones ::= Ecuacion ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Ecuaciones",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Ecuaciones ::= Ecuacion espacioCuatro Ecuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Ecuaciones",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Ecuaciones ::= Ecuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Ecuaciones",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Ecuaciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

